user
  div.container
    h2 user

    button(onclick='{create}') create

    ul.collection
      li.collection-item(each='{notes}')
        span.title {title}
        p {content}
          span by {_creator.name}
        span {parent.created(this)} / {parent.updated(this)}
        button(onclick='{destroy}') destroy
        button(onclick='{edit}') edit

  script.
    var self = this;

    this.on('mount', function() {
      var name = '';
      riot.route.exec(function(path) {
        name = path[1];
      });
      api.users.show(name)
        .done(function(data) {
          self.user = data.user;
          self.fetch();
        });
    });

    this.fetch = function() {
      // ノートを取得
      api.notes.index({userId:self.user._id})
        .done(function(res) {
          self.notes = res.notes.reverse();
          self.update();
        });
    };

    this.create = function() {
      var data = {
        title: 'untitled',
        content: 'ここにテキスト書いてってねー♪',
      }; 
      api.notes.create(data)
        .done(function() {
          self.fetch();
        });
    };

    this.edit = function(e) {
      var item = e.item;
      if (item._creator._id === global.me._id) {
        var path = ['note', item._id].join('/');
        riot.route(path);
      }
    };

    this.destroy = function(e) {
      var item = e.item;
      api.notes.destroy(item._id)
        .done(function() {
          self.fetch();
        });
    };

    this.created = function(item) {
      var date = new Date(item.created);
      return [date.getHours(), date.getMinutes()].join(':');
    };
    this.updated = function(item) {
      var date = new Date(item.updated);
      return [date.getHours(), date.getMinutes()].join(':');
    };







